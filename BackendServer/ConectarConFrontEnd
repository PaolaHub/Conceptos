
# Vamos a conectar el Backend con el Frontend

Lo primero que tenemos que hacer es tener abierto:

1. Mongo (mongod.exe)
2. Backend-Server (npm start)
3. Frontend (ng serve -o)
4. Visual Studio con la carpeta del frontend.

## Creando un modelo de usuario en el Frontend

Lo primero que haces es observar a los usuario en la base de datos.
Vemos que los usuarios tienen sus propiedades que definimos en el backend-Server.

Para poder comunicarnos entonces de manera fácil, vamos a crearnos en el Frontend
también un modelo de datos de usuario, para que cada vez que recibamos o enviemos
información la hagamos siguiendo el mismo modelo.

Entonces, en el Frontend, en **src/app** creamos una nueva carpeta **models**.
Dentro creamos el archivo **usuario.model.ts** y definimos nuestro modelo en typescript:

                export class Usuario {

                    constructor(
                        public nombre: string,
                        public email: string,
                        public password: string,
                        public img?: string,
                        public role?: string,
                        public google?: boolean,
                        // tslint:disable-next-line: variable-name
                        public _id?: string
                    ) {}

                }
                
 ## Creando usuarios
 
Una vez creado nuestro modelo, vamos a crear los servicios.
En este ejemplo vamos a crear el servicio usuarios para crear un nuevo usuario en el registro, o hacer un login.
**ng g s services/usuario/usuario** => **app/services/usuario/usuario.service.ts**

Con el siguiente código:

            import { Injectable } from '@angular/core';
            import { Usuario } from '../../models/usuario.model';
            import { HttpClient } from '@angular/common/http';
            import { URL_SERVICIOS } from '../../config/config';
            import swal from 'sweetalert';

            import { map } from 'rxjs/operators';
            import { Router } from '@angular/router';

            @Injectable({
              providedIn: 'root'
            })
            export class UsuarioService {

              usuario: Usuario;
              token: string;

              constructor(
                public http: HttpClient,
                public router: Router) {

                  this.cargarStorage();

               }

               estaLogueado() {
                 return (this.token.length > 5) ? true : false;
               }

               cargarStorage() {
                 if (localStorage.getItem('token')) {
                   this.token = localStorage.getItem('token');
                   this.usuario = JSON.parse(localStorage.getItem('usuario'));
                 } else {
                  this.token = '';
                  this.usuario = null;
                 }
               }

              guardarStorage(id: string, token: string, usuario: Usuario) {
                localStorage.setItem('id', id);
                localStorage.setItem('token', token);
                localStorage.setItem('usuario', JSON.stringify(usuario));
                this.usuario = usuario;
                this.token = token;
              }

              logout() {
                this.usuario = null;
                this.token = '';

                localStorage.removeItem('token');
                localStorage.removeItem('usuario');

                this.router.navigate(['/login']);

              }

              loginGoogle(token: string) {
                const url = URL_SERVICIOS + '/login/google';
                return this.http.post(url, {token})
                  .pipe(map((resp: any ) => {
                      this.guardarStorage(resp.id, resp.token, resp.usuario);
                      return true;
                }));
              }

              login(usuario: Usuario, recordar: boolean = false) {

                if (recordar) {
                  localStorage.setItem('email', usuario.email);
                } else {
                  localStorage.removeItem('email');
                }

                const url = URL_SERVICIOS + '/login';
                return this.http.post(url, usuario)
                  .pipe(map((res: any ) => {

                    this.guardarStorage(res.id, res.token, res.usuario);
                    return true;
                  }));
              }

              crearUsuario(usuario: Usuario) {

                const url = URL_SERVICIOS + '/usuario';
                // Para ser notificado cuando esto se haga vamos a decolver un observador al que nos vamos
                // a poder subcribir.
                return this.http.post(url, usuario)
                  .pipe(map( (res: any) => {

                    swal('Usuario creado', usuario.email, 'success');
                    return res.usuario;
                  }));

              }
            }

 
 1. Crear los formularios
 2. Crear las validaciones
 4. Hacer que el formulario tenga su propio submit y llame a una funcion del componente.
    De momento esa funcion va a mostar por consola los datos del usuario que se acaba de registrar
 
 5. Crear un servicio nuevo usuario.service.ts y crear un método post que llame a nuestro backend, que está corriendo
 con la ruta que hemos definido. Para ello, tenemos que importar el HttpClient y en el module el HttpClientModule
 
 6. Injectar el nuevo servicio en el componente register y hacer que el submit llama la funcion del servicio
 y se subcriba a ella. Si todo lo hace bien, navegar
 
 
